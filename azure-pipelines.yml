trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - '**/*.tf'
      - '**/*.tfvars'
      - 'azure-pipelines.yml'

resources:
  repositories:
    - repository: self
      type: github
      name: lee-moss/Azure_Netflix_Project
      endpoint: GitHub

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: netflix-variables
  - name: TF_STATE_RG
    value: 'NetflixProject'
  - name: TF_STATE_STORAGE
    value: 'tfstatest'
  - name: TF_STATE_CONTAINER
    value: 'tfstate-con'
  - name: SONAR_PROJECT_KEY
    value: 'LAM5_Azure-Netflix'
  - name: SONAR_ORGANIZATION
    value: 'lam5'
  - name: SONAR_PROJECT_NAME
    value: 'Azure-Netflix'

stages:
  - stage: Analysis
    displayName: 'Code Analysis'
    jobs:
      - job: CodeAnalysis
        steps:
          - checkout: self
            fetchDepth: 0
            
          - task: SonarCloudPrepare@3
            displayName: 'Prepare SonarCloud Analysis'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'lam5'
              scannerMode: 'CLI'
              configMode: 'file'
              extraProperties: |
                sonar.projectKey=$(SONAR_PROJECT_KEY)
                sonar.projectName=$(SONAR_PROJECT_NAME)
                sonar.verbose=true

          - task: SonarCloudAnalyze@3
            displayName: 'Run Code Analysis'

          - task: SonarCloudPublish@3
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'
              waitForQualityGate: true

          - task: trivy@1
            displayName: 'Scan local project'
            inputs:
              version: 'latest'
              scanType: 'fs'
              path: '$(System.DefaultWorkingDirectory)'
              severity: 'CRITICAL,HIGH'
              format: 'table'
              output: '$(Build.ArtifactStagingDirectory)/trivy-results.txt'
              exitCode: '1'
              options: '--skip-dirs .git,.terraform'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Trivy Results'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'TrivyReport'
            condition: succeededOrFailed()

  - stage: Validate
    displayName: 'Validate and Plan'
    dependsOn: Analysis
    condition: succeeded('Analysis')
    jobs:
      - job: ValidateAndPlan
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'devOps-connection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
              backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE)'
              backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
              backendAzureRmKey: 'netflix.tfstate'
              commandOptions: '-upgrade'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'devOps-connection'
              commandOptions: '-var="admin_username=$(admin_username)" -var="admin_password=$(admin_password)" -var="key_vault_name=NetflixSecret" -var="key_vault_rg=NetflixProject" -var="my_ip_address=$(my_ip_address)" -var="tmdb_api_key=$(tmdb_api_key)" -var="tmdb_access_token=$(tmdb_access_token)"'

  # - stage: Deploy
  #   displayName: 'Deploy Infrastructure'
  #   dependsOn: Validate
  #   condition: succeeded('Validate')
  #   jobs:
  #     - job: Apply
  #       steps:
  #         - task: TerraformInstaller@1
  #           inputs:
  #             terraformVersion: 'latest'

  #         - task: TerraformTaskV4@4
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             backendServiceArm: 'devOps-connection'
  #             backendAzureRmResourceGroupName: '$(TF_STATE_RG)'
  #             backendAzureRmStorageAccountName: '$(TF_STATE_STORAGE)'
  #             backendAzureRmContainerName: '$(TF_STATE_CONTAINER)'
  #             backendAzureRmKey: 'netflix.tfstate'
  #             commandOptions: '-upgrade'

  #         - task: TerraformTaskV4@4
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             environmentServiceNameAzureRM: 'devOps-connection'
  #             commandOptions: '-var="admin_username=$(admin_username)" -var="admin_password=$(admin_password)" -var="key_vault_name=NetflixSecret" -var="key_vault_rg=NetflixProject" -var="my_ip_address=$(my_ip_address)" -var="tmdb_api_key=$(tmdb_api_key)" -var="tmdb_access_token=$(tmdb_access_token)"'

